param(
    [Parameter()]
    [string]$musicDir,

    [Parameter()]
    [string]$playlistsFile,

    [Parameter()]
    [string]$2dlFile,

    [Parameter()]
    [switch]$OverwriteExisting
)

# Set the parameters if they aren't provided through the CLI
if (-not $musicDir) {
    $musicDir = "B:\Audio\music"
}

if (-not $playlistsFile) {
    $playlistsFile = "$PSScriptRoot\playlists.txt"
}

if (-not $2dlFile) {
    $2dlFile = "$PSScriptRoot\2DL.txt"
}



# Capture the start time
$StartTime = Get-Date

#create the necessary directories
if (!(Test-Path -Type Container $musicDir\Playlists)) {
    Write-Host -ForegroundColor Cyan "Playlist directory not found. Creating..."
    $null = New-Item -Path $musicDir\Playlists -ItemType Directory -Force -ErrorAction SilentlyContinue
    
}
if (!(Test-Path -Type Container $musicDir\Music)) {
    Write-Host -ForegroundColor Cyan "Music directory not found. Creating..."
    $null = New-Item -Path $musicDir\Music -ItemType Directory -Force -ErrorAction SilentlyContinue
}
# removes old music if the switch is set
if ($OverwriteExisting -eq $true) {
    Write-Host -ForegroundColor Red "Script is set to overwrite existing data. Removing old mp3..."
    Remove-Item -Recurse "$musicDir\Music\*"
    Remove-Item -Recurse "$musicDir\Playlists\*"
}

#download the playlists one by one in the correct folder.
Set-Location "$musicDir\Playlists"
$fileContent = Get-Content -Path "$playlistsFile" -Encoding UTF8

$fileContent | ForEach-Object {
    
    $line = $_.Trim()
    $name = $($line -split (";"))[0]
    $url = $($line -split (";"))[1]

    if (!($line.StartsWith("#"))) {
        Write-Host "Downloading playlist: $name" -ForegroundColor Cyan
        if (!(Test-Path -Type Container $musicDir\Playlists\$name)) {
            Write-Host -ForegroundColor Cyan "$name directory not found. Creating..."
            $null = New-Item -Path $musicDir\Playlists\$name -ItemType Directory -Force -ErrorAction SilentlyContinue
            
        }
        Set-Location $musicDir\Playlists\$name
        python.exe -m spotdl --user-auth --overwrite "skip" $($url)
        Set-Location $musicDir
    }
}


#download the music in the global music folder
Write-Host -ForegroundColor Cyan "Playlists finished downloading. Starting bulk music download..."
Set-Location "$musicDir\Music"
$fileContent = Get-Content -Path "$2dlFile" -Encoding UTF8

$spotdlInstruction = "spotdl --user-auth --overwrite 'skip' download "

$fileContent | ForEach-Object {
    $line = $_.Trim()
    if (!($line.StartsWith("#"))) {
        
        $spotdlInstruction += "$line "
               
        # Replace the existing line with a modified one (with "#" added)
        #(Get-Content -Path "$PSScriptRoot\2DL.txt" -Raw) -replace [regex]::Escape($line), "#$line" | Set-Content -Path "$PSScriptRoot\2DL.txt"
    }
}
powershell.exe $spotdlInstruction


# Checks for duplicates between albums and playlists
$playlistsDir = "$musicDir\Playlists\"
$musicpath = "$musicDir\Music\"

$musicFiles = Get-ChildItem -Path $musicpath -Recurse
$playlistFiles = Get-ChildItem -Path $playlistsDir -Recurse

foreach ($song in $playlistFiles) {
    $baseName = $song.BaseName
    $matchingMusicFile = $musicFiles | Where-Object { $_.BaseName -eq $baseName }

    if ($matchingMusicFile) {
        Write-Host "Duplicate $baseName" -ForegroundColor Red
        try {
            Remove-Item $matchingMusicFile.FullName -ErrorAction SilentlyContinue
        }
        catch {
            
        }
        
    }
}

Set-Location $PSScriptRoot
# Capture the end time
$EndTime = Get-Date

# Calculate elapsed time
$ElapsedTime = New-TimeSpan -Start $StartTime -End $EndTime

# Display the elapsed time
Write-Host "Script execution took $($ElapsedTime.Hours) hours, $($ElapsedTime.Minutes) minutes, and $($ElapsedTime.Seconds) seconds."
Pause